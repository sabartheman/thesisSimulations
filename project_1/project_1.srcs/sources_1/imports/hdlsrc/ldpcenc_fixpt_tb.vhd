-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Low_density_parity_code/codegen/ldpcenc/hdlsrc/ldpcenc_fixpt_tb.vhd
-- Created: 2019-04-06 09:18:17
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ldpcenc_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.ldpcenc_fixpt_pkg.ALL;
USE work.ldpcenc_fixpt_tb_pkg.ALL;

ENTITY ldpcenc_fixpt_tb IS
END ldpcenc_fixpt_tb;


ARCHITECTURE rtl OF ldpcenc_fixpt_tb IS

  -- Component Declarations
  COMPONENT ldpcenc_fixpt
    PORT( m                               :   IN    std_logic_vector(0 TO 3);  -- ufix1 [4]
          codedout                        :   OUT   std_logic_vector(0 TO 6)  -- ufix1 [7]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ldpcenc_fixpt
    USE ENTITY work.ldpcenc_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL codedout_done                    : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL codedout_done_enb                : std_logic;  -- ufix1
  SIGNAL codedout_addr                    : std_logic;  -- ufix1
  SIGNAL codedout_active                  : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL codedout_enb                     : std_logic;  -- ufix1
  SIGNAL codedout_lastAddr                : std_logic;  -- ufix1
  SIGNAL m_addr                           : std_logic;  -- ufix1
  SIGNAL m_active                         : std_logic;  -- ufix1
  SIGNAL m_enb                            : std_logic;  -- ufix1
  SIGNAL m_addr_delay_1                   : std_logic;  -- ufix1
  SIGNAL rawData_m                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL holdData_m                       : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL m_offset                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL m_1                              : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL codedout_1                       : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL codedout_addr_delay_1            : std_logic;  -- ufix1
  SIGNAL codedout_expected                : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL codedout_ref                     : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL codedout_testFailure             : std_logic;  -- ufix1

BEGIN
  u_ldpcenc_fixpt : ldpcenc_fixpt
    PORT MAP( m => m_1,  -- ufix1 [4]
              codedout => codedout_1  -- ufix1 [7]
              );

  codedout_done_enb <= codedout_done AND rdEnb;

  
  codedout_active <= '1' WHEN codedout_addr /= '1' ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  snkDonen <=  NOT check1_done;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  ce_out <= enb AND (rdEnb AND tb_enb);

  codedout_enb <= ce_out AND codedout_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  codedout_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      codedout_addr <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF codedout_enb = '1' THEN
        codedout_addr <=  NOT codedout_addr;
      END IF;
    END IF;
  END PROCESS codedout_process;


  
  codedout_lastAddr <= '1' WHEN codedout_addr = '1' ELSE
      '0';

  codedout_done <= codedout_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF codedout_done_enb = '1' THEN
        check1_done <= codedout_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  
  m_active <= '1' WHEN m_addr /= '1' ELSE
      '0';

  m_enb <= m_active AND (rdEnb AND tb_enb);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  m_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      m_addr <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF m_enb = '1' THEN
        m_addr <=  NOT m_addr;
      END IF;
    END IF;
  END PROCESS m_process;


  m_addr_delay_1 <= m_addr AFTER 1 ns;

  -- Data source for m
--  m_fileread: PROCESS (m_addr_delay_1, tb_enb, rdEnb)
--    FILE fp: TEXT open READ_MODE is "m.dat";
--    VARIABLE l: LINE;
--    VARIABLE read_data: std_logic_vector(0 TO 3);

--  BEGIN
--    IF tb_enb /= '1' THEN
--    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
--      READLINE(fp, l);
--      READ(l, read_data(0));
--      READ(l, read_data(1));
--      READ(l, read_data(2));
--      READ(l, read_data(3));
--    END IF;
--    rawData_m <= (read_data(0), read_data(1), read_data(2), read_data(3));
--  END PROCESS m_fileread;

  -- holdData reg for m
  stimuli_m_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_m <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_m <= rawData_m;
    END IF;
  END PROCESS stimuli_m_process;

  stimuli_m_1: PROCESS (rawData_m, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      m_offset <= holdData_m;
    ELSE
      m_offset <= rawData_m;
    END IF;
  END PROCESS stimuli_m_1;

  m_1 <= m_offset AFTER 2 ns;

  codedout_addr_delay_1 <= codedout_addr AFTER 1 ns;

--  -- Data source for codedout_expected
--  codedout_expected_fileread: PROCESS (codedout_addr_delay_1, tb_enb, rdEnb)
--    FILE fp: TEXT open READ_MODE is "codedout_expected.dat";
--    VARIABLE l: LINE;
--    VARIABLE read_data: std_logic_vector(0 TO 6);

--  BEGIN
--    IF tb_enb /= '1' THEN
--    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
--      READLINE(fp, l);
--      READ(l, read_data(0));
--      READ(l, read_data(1));
--      READ(l, read_data(2));
--      READ(l, read_data(3));
--      READ(l, read_data(4));
--      READ(l, read_data(5));
--      READ(l, read_data(6));
--    END IF;
--    codedout_expected <= (read_data(0), read_data(1), read_data(2), read_data(3), read_data(4), read_data(5), read_data(6));
--  END PROCESS codedout_expected_fileread;

--  codedout_ref <= codedout_expected;

--  codedout_1_checker: PROCESS (clk, reset)
--  BEGIN
--    IF reset = '1' THEN
--      codedout_testFailure <= '0';
--    ELSIF clk'event AND clk = '1' THEN
--      IF ce_out = '1' AND codedout_1 /= codedout_ref THEN
--        codedout_testFailure <= '1';
--        ASSERT FALSE
--          REPORT "Error in codedout_1: Expected " & to_hex(codedout_ref) & (" Actual " & to_hex(codedout_1))
--          SEVERITY ERROR;
--      END IF;
--    END IF;
--  END PROCESS codedout_1_checker;

--  completed_msg: PROCESS (clk)
--  BEGIN
--    IF clk'event AND clk = '1' THEN
--      IF check1_done = '1' THEN
--        IF codedout_testFailure = '0' THEN
--          ASSERT FALSE
--            REPORT "**************TEST COMPLETED (PASSED)**************"
--            SEVERITY NOTE;
--        ELSE
--          ASSERT FALSE
--            REPORT "**************TEST COMPLETED (FAILED)**************"
--            SEVERITY NOTE;
--        END IF;
--      END IF;
--    END IF;
--  END PROCESS completed_msg;

END rtl;

