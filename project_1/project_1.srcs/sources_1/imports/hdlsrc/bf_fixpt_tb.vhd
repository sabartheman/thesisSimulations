-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Low_density_parity_code/codegen/bf/hdlsrc/bf_fixpt_tb.vhd
-- Created: 2019-04-23 21:45:12
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: bf_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.bf_fixpt_pkg.ALL;
USE work.bf_fixpt_tb_pkg.ALL;

ENTITY bf_fixpt_tb IS
END bf_fixpt_tb;


ARCHITECTURE rtl OF bf_fixpt_tb IS

  -- Component Declarations
  COMPONENT bf_fixpt
    PORT( r_1                             :   IN    std_logic_vector(0 TO 6);  -- ufix1 [7]
          iter                            :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          out_rsvd                        :   OUT   std_logic_vector(0 TO 6)  -- ufix1 [7]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : bf_fixpt
    USE ENTITY work.bf_fixpt(rtl);

    attribute dont_touch : string;
    
    attribute dont_touch of bf_fixpt :component is "true";

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL out_rsvd_addr                    : std_logic;  -- ufix1
  SIGNAL out_rsvd_lastAddr                : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rdEnb                            : std_logic;
  SIGNAL out_rsvd_done                    : std_logic;  -- ufix1
  SIGNAL out_rsvd_done_enb                : std_logic;  -- ufix1
  SIGNAL rawData_r_1                      : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL holdData_r_1                     : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL rawData_iter                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL holdData_iter                    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL ce_out                           : std_logic;
  SIGNAL r_1_offset                       : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL r_1_1                            : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL iter_offset                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL iter_1                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL iter_2                           : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL out_rsvd                         : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL out_rsvd_expected_1              : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL out_rsvd_ref                     : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL out_rsvd_testFailure             : std_logic;  -- ufix1

BEGIN
  u_bf_fixpt : bf_fixpt
    PORT MAP( r_1 => r_1_1,  -- ufix1 [7]
              iter => iter_2,  -- ufix7
              out_rsvd => out_rsvd  -- ufix1 [7]
              );

  out_rsvd_lastAddr <= '1';

  snkDonen <=  NOT check1_done;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  out_rsvd_done_enb <= out_rsvd_done AND rdEnb;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  out_rsvd_done <= out_rsvd_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF out_rsvd_done_enb = '1' THEN
        check1_done <= out_rsvd_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  enb <= rdEnb AFTER 2 ns;

  -- Data source for r_1
  rawData_r_1(0) <= '1';
  rawData_r_1(1) <= '0';
  rawData_r_1(2) <= '1';
  rawData_r_1(3) <= '0';
  rawData_r_1(4) <= '0';
  rawData_r_1(5) <= '1';
  rawData_r_1(6) <= '0';

  -- holdData reg for r_1
  stimuli_r_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_r_1 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_r_1 <= rawData_r_1;
    END IF;
  END PROCESS stimuli_r_1_process;

  -- Data source for iter
  rawData_iter <= to_unsigned(16#64#, 7);

  -- holdData reg for iter
  stimuli_iter_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_iter <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_iter <= rawData_iter;
    END IF;
  END PROCESS stimuli_iter_process;

  ce_out <= enb AND (rdEnb AND tb_enb);

  stimuli_r_1_1: PROCESS (rawData_r_1, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      r_1_offset <= holdData_r_1;
    ELSE
      r_1_offset <= rawData_r_1;
    END IF;
  END PROCESS stimuli_r_1_1;

  r_1_1 <= r_1_offset AFTER 2 ns;

  stimuli_iter_1: PROCESS (rawData_iter, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      iter_offset <= holdData_iter;
    ELSE
      iter_offset <= rawData_iter;
    END IF;
  END PROCESS stimuli_iter_1;

  iter_1 <= iter_offset AFTER 2 ns;

  iter_2 <= std_logic_vector(iter_1);

  -- Data source for out_rsvd_expected
  out_rsvd_expected_1(0) <= '1';
  out_rsvd_expected_1(1) <= '0';
  out_rsvd_expected_1(2) <= '1';
  out_rsvd_expected_1(3) <= '0';
  out_rsvd_expected_1(4) <= '0';
  out_rsvd_expected_1(5) <= '1';
  out_rsvd_expected_1(6) <= '0';

  out_rsvd_ref <= out_rsvd_expected_1;

  out_rsvd_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_rsvd_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND out_rsvd /= out_rsvd_ref THEN
        out_rsvd_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in out_rsvd: Expected " & to_hex(out_rsvd_ref) & (" Actual " & to_hex(out_rsvd))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS out_rsvd_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF out_rsvd_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

