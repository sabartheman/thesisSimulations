-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Turbo_codes/codegen/tbcenc/hdlsrc/tbcenc_fixpt.vhd
-- Created: 2019-04-08 15:54:01
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: tbcenc_fixpt
-- Source Path: tbcenc_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.tbcenc_fixpt_pkg.ALL;

ENTITY tbcenc_fixpt IS
  PORT( msg_in                            :   IN    std_logic_vector(0 TO 7);  -- ufix1 [8]
        intlv                             :   IN    vector_of_std_logic_vector4(0 TO 7);  -- ufix4 [8]
        output1                           :   OUT   std_logic_vector(0 TO 7);  -- boolean [8]
        output2                           :   OUT   std_logic_vector(0 TO 7);  -- boolean [8]
        output3                           :   OUT   std_logic_vector(0 TO 7)  -- boolean [8]
        );
END tbcenc_fixpt;


ARCHITECTURE rtl OF tbcenc_fixpt IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;

  -- HDLCODER_TO_SIGNED
  FUNCTION hdlcoder_to_signed(arg: boolean; width: integer) RETURN signed IS
  BEGIN
    IF arg THEN
      RETURN to_signed(1, width);
    ELSE
      RETURN to_signed(0, width);
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL intlv_unsigned                   : vector_of_unsigned4(0 TO 7);  -- ufix4 [8]

BEGIN
  outputgen: FOR k IN 0 TO 7 GENERATE
    intlv_unsigned(k) <= unsigned(intlv(k));
  END GENERATE;

  tbcenc_fixpt_1_output : PROCESS (intlv_unsigned, msg_in)
    VARIABLE msg_in1 : std_logic_vector(0 TO 7);
    VARIABLE c : std_logic_vector(0 TO 7);
    VARIABLE c_0 : std_logic_vector(0 TO 7);
    VARIABLE output11 : std_logic_vector(0 TO 7);
    VARIABLE output21 : std_logic_vector(0 TO 7);
    VARIABLE output31 : std_logic_vector(0 TO 7);
    VARIABLE tmp : std_logic;
    VARIABLE reg : std_logic_vector(0 TO 1);
    VARIABLE tmp_0 : std_logic;
    VARIABLE reg_0 : std_logic_vector(0 TO 1);
    VARIABLE t_0 : std_logic;
    VARIABLE t_1 : std_logic;
    VARIABLE sub_cast : vector_of_signed32(0 TO 7);
    VARIABLE cast : vector_of_signed32(0 TO 7);
    VARIABLE cast_0 : vector_of_signed32(0 TO 7);
  BEGIN
    --HDL code generation from MATLAB function: tbcenc_fixpt
    -- shift register
    -- feedforward           
    -- feedback
    -- for this case only
    -- shift register
    -- feedforward           
    -- feedback
    -- for this case only
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --           Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    -- file name:    tbenc.m
    -- description:  c = tbenc(msg_in,intlv) performs turbo code encoding (component encoder: rate-1/3, rsc = (1 5/7)). 
    --               msg_in is the input binary message sequence. intlv specifies the interleaver's permutation function.
    --               c is encoded sequence.
    --               an example is given in matlab experiment 6.3.
    -- author:       y. jiang 
    -- date:         june 2010
    -- veintlvrsion:      1.0
    -- msg_in1 = msg_in(intlv);

    FOR i IN 0 TO 7 LOOP
      sub_cast(i) := signed(resize(intlv_unsigned(i), 32));
      msg_in1(i) := msg_in(to_integer(sub_cast(i) - 1));
    END LOOP;

    -- encoding
    -- c1 = rsc(msg_in);                                 
    -- c2 = rsc(msg_in1);                                % getting rid of
    -- function call in this section, this causes quite a few allocation errors
    -- in the hdlcoder
    -- code generator is (1,5/7)
    -- initialization
    -- for i = 1:length(msg_in)
    reg := (OTHERS => '0');

    FOR i_0 IN 0 TO 7 LOOP
      IF (msg_in(i_0) XOR (reg(0) XOR reg(1))) /= '0' THEN 
        tmp := '1';
      ELSE 
        tmp := '0';
      END IF;
      cast(i_0) := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & tmp;
      c(i_0) := hdlcoder_to_stdlogic((cast(i_0) XOR hdlcoder_to_signed(reg(1) /= '0', 32)) /= to_signed(16#0#, 32));
      t_0 := reg(0);
      reg(0) := tmp;
      reg(1) := t_0;
    END LOOP;

    --c2 rsc encoding
    -- code generator is (1,5/7)
    -- initialization
    -- for i = 1:length(msg_in1)
    reg_0 := (OTHERS => '0');
    --trasnpose might not be supported?

    FOR i_1 IN 0 TO 7 LOOP
      IF (msg_in1(i_1) XOR (reg_0(0) XOR reg_0(1))) /= '0' THEN 
        tmp_0 := '1';
      ELSE 
        tmp_0 := '0';
      END IF;
      cast_0(i_1) := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & tmp_0;
      c_0(i_1) := hdlcoder_to_stdlogic((cast_0(i_1) XOR hdlcoder_to_signed(reg_0(1) /= '0', 32)) /= to_signed(16#0#, 32));
      t_1 := reg_0(0);
      reg_0(0) := tmp_0;
      reg_0(1) := t_1;
      output11(i_1) := msg_in(i_1);
      output21(i_1) := c(i_1);
      output31(i_1) := c_0(i_1);
      output1(i_1) <= output11(i_1);
      output2(i_1) <= output21(i_1);
      output3(i_1) <= output31(i_1);
    END LOOP;

  END PROCESS tbcenc_fixpt_1_output;


END rtl;

