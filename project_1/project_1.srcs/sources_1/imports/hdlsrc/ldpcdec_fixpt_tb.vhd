-- -------------------------------------------------------------
-- 
-- File Name: /home/sky/Documents/MATLAB/Low_density_parity_code/codegen/ldpcdec/hdlsrc/ldpcdec_fixpt_tb.vhd
-- Created: 2019-04-07 19:09:20
-- 
-- Generated by MATLAB 9.5, MATLAB Coder 4.1 and HDL Coder 3.13
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ldpcdec_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.ldpcdec_fixpt_pkg.ALL;
USE work.ldpcdec_fixpt_tb_pkg.ALL;

ENTITY ldpcdec_fixpt_tb IS
END ldpcdec_fixpt_tb;


ARCHITECTURE rtl OF ldpcdec_fixpt_tb IS

  -- Component Declarations
  COMPONENT ldpcdec_fixpt
    PORT( r                               :   IN    vector_of_std_logic_vector2(0 TO 6);  -- sfix2 [7]
          iter                            :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          dec_out                         :   OUT   vector_of_std_logic_vector10(0 TO 6)  -- sfix10_En1 [7]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ldpcdec_fixpt
    USE ENTITY work.ldpcdec_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL dec_out_addr                     : std_logic;  -- ufix1
  SIGNAL dec_out_lastAddr                 : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rdEnb                            : std_logic;
  SIGNAL dec_out_done                     : std_logic;  -- ufix1
  SIGNAL dec_out_done_enb                 : std_logic;  -- ufix1
  SIGNAL rawData_r                        : vector_of_signed2(0 TO 6);  -- sfix2 [7]
  SIGNAL holdData_r                       : vector_of_signed2(0 TO 6);  -- sfix2 [7]
  SIGNAL rawData_iter                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL holdData_iter                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL ce_out                           : std_logic;
  SIGNAL r_offset                         : vector_of_signed2(0 TO 6);  -- sfix2 [7]
  SIGNAL r_1                              : vector_of_signed2(0 TO 6);  -- sfix2 [7]
  SIGNAL r_2                              : vector_of_std_logic_vector2(0 TO 6);  -- ufix2 [7]
  SIGNAL iter_offset                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL iter_1                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL iter_2                           : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL dec_out                          : vector_of_std_logic_vector10(0 TO 6);  -- ufix10 [7]
  SIGNAL dec_out_signed                   : vector_of_signed10(0 TO 6);  -- sfix10_En1 [7]
  SIGNAL dec_out_expected_1               : vector_of_signed10(0 TO 6);  -- sfix10_En1 [7]
  SIGNAL dec_out_ref                      : vector_of_signed10(0 TO 6);  -- sfix10_En1 [7]
  SIGNAL dec_out_testFailure              : std_logic;  -- ufix1

BEGIN
  u_ldpcdec_fixpt : ldpcdec_fixpt
    PORT MAP( r => r_2,  -- sfix2 [7]
              iter => iter_2,  -- ufix10
              dec_out => dec_out  -- sfix10_En1 [7]
              );

  dec_out_lastAddr <= '1';

  snkDonen <=  NOT check1_done;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  dec_out_done_enb <= dec_out_done AND rdEnb;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  dec_out_done <= dec_out_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF dec_out_done_enb = '1' THEN
        check1_done <= dec_out_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  enb <= rdEnb AFTER 2 ns;

  -- Data source for r
  rawData_r(0) <= to_signed(16#1#, 2);
  rawData_r(1) <= to_signed(16#1#, 2);
  rawData_r(2) <= to_signed(-16#1#, 2);
  rawData_r(3) <= to_signed(-16#1#, 2);
  rawData_r(4) <= to_signed(16#1#, 2);
  rawData_r(5) <= to_signed(-16#1#, 2);
  rawData_r(6) <= to_signed(16#1#, 2);

  -- holdData reg for r
  stimuli_r_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_r <= (OTHERS => (OTHERS => 'X'));
    ELSIF clk'event AND clk = '1' THEN
      holdData_r <= rawData_r;
    END IF;
  END PROCESS stimuli_r_process;

  -- Data source for iter
  rawData_iter <= to_unsigned(16#3E8#, 10);

  -- holdData reg for iter
  stimuli_iter_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_iter <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_iter <= rawData_iter;
    END IF;
  END PROCESS stimuli_iter_process;

  ce_out <= enb AND (rdEnb AND tb_enb);

  stimuli_r_1: PROCESS (rawData_r, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      r_offset <= holdData_r;
    ELSE
      r_offset <= rawData_r;
    END IF;
  END PROCESS stimuli_r_1;

  r_1 <= r_offset AFTER 2 ns;

  outputgen1: FOR k IN 0 TO 6 GENERATE
    r_2(k) <= std_logic_vector(r_1(k));
  END GENERATE;

  stimuli_iter_1: PROCESS (rawData_iter, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      iter_offset <= holdData_iter;
    ELSE
      iter_offset <= rawData_iter;
    END IF;
  END PROCESS stimuli_iter_1;

  iter_1 <= iter_offset AFTER 2 ns;

  iter_2 <= std_logic_vector(iter_1);

  outputgen: FOR k IN 0 TO 6 GENERATE
    dec_out_signed(k) <= signed(dec_out(k));
  END GENERATE;

  -- Data source for dec_out_expected
  dec_out_expected_1(0) <= to_signed(16#002#, 10);
  dec_out_expected_1(1) <= to_signed(16#000#, 10);
  dec_out_expected_1(2) <= to_signed(16#000#, 10);
  dec_out_expected_1(3) <= to_signed(16#002#, 10);
  dec_out_expected_1(4) <= to_signed(16#000#, 10);
  dec_out_expected_1(5) <= to_signed(16#002#, 10);
  dec_out_expected_1(6) <= to_signed(16#000#, 10);

  dec_out_ref <= dec_out_expected_1;

  dec_out_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dec_out_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND dec_out_signed /= dec_out_ref THEN
        dec_out_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in dec_out_signed: Expected " & to_hex(dec_out_ref) & (" Actual " & to_hex(dec_out_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS dec_out_signed_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF dec_out_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

